// Copyright 2019 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package nginx

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"

	"github.com/tsuru/rpaas-operator/pkg/apis/extensions/v1alpha1"
)

type ConfigurationRenderer interface {
	Render(ConfigurationData) (string, error)
}

type ConfigurationBlocks struct {
	MainBlock      string
	RootBlock      string
	HttpBlock      string
	ServerBlock    string
	LuaServerBlock string
	LuaWorkerBlock string
}

type ConfigurationData struct {
	Config   *v1alpha1.NginxConfig
	Instance *v1alpha1.RpaasInstance
}

type rpaasConfigurationRenderer struct {
	t *template.Template
}

func (r *rpaasConfigurationRenderer) Render(c ConfigurationData) (string, error) {
	buffer := &bytes.Buffer{}
	err := r.t.Execute(buffer, c)
	return buffer.String(), err
}

func NewConfigurationRenderer(cb ConfigurationBlocks) (ConfigurationRenderer, error) {
	tpl, err := defaultMainTemplate.Clone()
	if err != nil {
		return nil, err
	}

	if cb.MainBlock != "" {
		tpl, err = template.New("main").Funcs(templateFuncs).Parse(cb.MainBlock)
		if err != nil {
			return nil, err
		}
	}

	if _, err = tpl.New("root").Parse(cb.RootBlock); err != nil {
		return nil, err
	}

	if _, err = tpl.New("http").Parse(cb.HttpBlock); err != nil {
		return nil, err
	}

	if _, err = tpl.New("server").Parse(cb.ServerBlock); err != nil {
		return nil, err
	}

	if _, err = tpl.New("lua-server").Parse(cb.LuaServerBlock); err != nil {
		return nil, err
	}

	if _, err = tpl.New("lua-worker").Parse(cb.LuaWorkerBlock); err != nil {
		return nil, err
	}

	return &rpaasConfigurationRenderer{t: tpl}, nil
}

func buildLocationKey(prefix, path string) string {
	if path == "" {
		panic("cannot build location key due path is missing")
	}

	if prefix == "" {
		prefix = "rpaas_locations_"
	}

	key := "root"
	if path != "/" {
		key = strings.ReplaceAll(path, "/", "_")
	}

	return fmt.Sprintf("%s%s", prefix, key)
}

func hasRootPath(locations []v1alpha1.Location) bool {
	for _, location := range locations {
		if location.Path == "/" {
			return true
		}
	}
	return false
}

func httpPort(instance *v1alpha1.RpaasInstance) int {
	if instance != nil && instance.Spec.PodTemplate.HostNetwork {
		return 80
	}

	return 8080
}

func httpsPort(instance *v1alpha1.RpaasInstance) int {
	if instance != nil && instance.Spec.PodTemplate.HostNetwork {
		return 443
	}

	return 8443
}

var templateFuncs = template.FuncMap(map[string]interface{}{
	"boolValue":          v1alpha1.BoolValue,
	"buildLocationKey":   buildLocationKey,
	"hasRootPath":        hasRootPath,
	"toLower":            strings.ToLower,
	"toUpper":            strings.ToUpper,
	"managePort":         managePort,
	"httpPort":           httpPort,
	"httpsPort":          httpsPort,
	"purgeLocationMatch": purgeLocationMatch,
	"vtsLocationMatch":   vtsLocationMatch,
})

var defaultMainTemplate = template.Must(template.New("main").
	Funcs(templateFuncs).
	Parse(rawNginxConfiguration))

// NOTE: This nginx's configuration works fine with the "tsuru/nginx-tsuru"
// container image. We rely on this image to load some required modules
// (such as echo, uuid4, more_set_headers, vts, etc), as well as point to some
// files in the system directory. Be aware when using a different container
// image.
var rawNginxConfiguration = `
{{- $all := . -}}
{{- $config := .Config -}}
{{- $instance := .Instance -}}

# This file was generated by RPaaS (https://github.com/tsuru/rpaas-operator.git)
# Do not modify this file, any change will be lost.

{{- with $config.User }}
user {{ . }};
{{- end }}

{{- with $config.WorkerProcesses }}
worker_processes {{ . }};
{{- end }}

include modules/*.conf;

{{- template "root" . }}

events {
    {{- with $config.WorkerConnections }}
    worker_connections {{ . }};
    {{- end }}
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    {{- if not (boolValue $config.SyslogEnabled) }}
    access_log /dev/stdout combined;
    error_log  /dev/stderr;
    {{- else }}
    access_log syslog:server={{ $config.SyslogServerAddress }}
        {{- with $config.SyslogFacility }},facility={{ . }}{{ end }}
        {{- with $config.SyslogTag }},tag={{ . }}{{ end}}
        combined;

    error_log syslog:server={{ $config.SyslogServerAddress }}
        {{- with $config.SyslogFacility }},facility={{ . }}{{ end }}
        {{- with $config.SyslogTag }},tag={{ . }}{{ end }};
    {{- end }}

    proxy_http_version 1.1;

    {{- if boolValue $config.CacheEnabled }}
    proxy_cache_path {{ $config.CachePath }}/nginx levels=1:2 keys_zone=rpaas:{{ $config.CacheZoneSize }}
        {{- with $config.CacheInactive }} inactive={{ . }}{{ end }}
        {{- with $config.CacheSize }} max_size={{ . }}{{ end }}
        {{- with $config.CacheLoaderFiles }} loader_files={{ . }}{{ end }};

    proxy_temp_path {{ $config.CachePath }}/nginx_tmp 1 2;
    {{- end }}

    {{- if boolValue $config.VTSEnabled }}
    vhost_traffic_status_zone;

    {{- with $config.VTSStatusHistogramBuckets }}
    vhost_traffic_status_histogram_buckets {{ . }};
    {{- end }}
    {{- end}}

    {{- if $instance.Spec.Host }}
    upstream rpaas_default_upstream {
        server {{ $instance.Spec.Host }};

        {{- with $config.UpstreamKeepalive }}
        keepalive {{ . }};
        {{- end }}
    }
    {{- end }}

    {{- range $_, $location := $instance.Spec.Locations }}
    {{- if $location.Destination }}
    upstream {{ buildLocationKey "" $location.Path }} {
        server {{ $location.Destination }};

        {{- with $config.UpstreamKeepalive }}
        keepalive {{ . }};
        {{- end }}
    }
    {{- end }}
    {{- end }}

    init_by_lua_block {
        {{- template "lua-server" . }}
    }

    init_worker_by_lua_block {
        {{- template "lua-worker" . }}
    }

    {{- template "http" . }}

    server {
        listen {{ managePort }};

        {{- if boolValue $config.CacheEnabled }}
        location ~ {{ purgeLocationMatch }} {
            proxy_cache_purge rpaas $1$is_args$args;
        }
        {{- end }}

        {{- if boolValue $config.VTSEnabled }}
        location {{ vtsLocationMatch }} {
            vhost_traffic_status_bypass_limit on;
            vhost_traffic_status_bypass_stats on;
            vhost_traffic_status_display;
            vhost_traffic_status_display_format prometheus;
        }
        {{- end }}
    }

    server {
        listen {{ httpPort $instance }} default_server
            {{- with $config.HTTPListenOptions }} {{ . }}{{ end }};

        {{- if $instance.Spec.Certificates }}
        {{- range $_, $item := $instance.Spec.Certificates.Items }}
        {{- if and (eq $item.CertificateField "default.crt") (eq $item.KeyField "default.key") }}
        listen {{ httpsPort $instance }} default_server ssl http2
            {{- with $config.HTTPSListenOptions }} {{ . }}{{ end }};

        ssl_certificate     certs/{{ with $item.CertificatePath }}{{ . }}{{ else }}{{ $item.CertificateField }}{{ end }};
        ssl_certificate_key certs/{{ with $item.KeyPath }}{{ . }}{{ else }}{{ $item.KeyField }}{{ end }};
        {{- end }}
        {{- end }}
        {{- end }}

        location = /_nginx_healthcheck {
            {{- if boolValue $config.VTSEnabled }}
            vhost_traffic_status_bypass_limit on;
            vhost_traffic_status_bypass_stats on;
            {{- end }}

            access_log off;

            default_type "text/plain";
            return 200 "WORKING\n";
        }

        {{- if $instance.Spec.Locations }}
        {{- range $_, $location := $instance.Spec.Locations }}
        location {{ $location.Path }} {
        {{- if $location.Destination }}
            {{- if $location.ForceHTTPS }}
            if ($scheme = 'http') {
                return 301 https://$http_host$request_uri;
            }
            {{- end }}

            proxy_set_header Connection "";
            proxy_set_header Host {{ $location.Destination }};

            proxy_pass http://{{ buildLocationKey "" $location.Path }}/;
            proxy_redirect ~^http://{{ buildLocationKey "" $location.Path }}(:\d+)?/(.*)$ {{ $location.Path }}$2;
        {{- else }}
        {{- with $location.Content.Value }}
            {{ . }}
        {{- end }}
        {{- end }}
        }
        {{- end }}
        {{- end }}

        {{- if not (hasRootPath $instance.Spec.Locations) }}
        {{- if $instance.Spec.Host }}
        location / {
            proxy_set_header Connection "";
            proxy_set_header Host {{ $instance.Spec.Host }};

            proxy_pass http://rpaas_default_upstream/;
            proxy_redirect ~^http://rpaas_default_upstream(:\d+)?/(.*)$ /$2;
        }
        {{- else }}
        location / {
            default_type "text/plain";
            return 404 "instance not bound\n";
        }
        {{- end}}
        {{- end}}

        {{- template "server" .}}
    }
}
`
