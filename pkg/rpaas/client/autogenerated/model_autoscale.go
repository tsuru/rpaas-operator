/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
)

// checks if the Autoscale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Autoscale{}

// Autoscale struct for Autoscale
type Autoscale struct {
	// The lower limit for the number of replicas to which the autoscaler can scale down. It cannot be greater than `maxReplicas`. It can be zero when set along with `rps` and/or `schedules` targets.
	MinReplicas int32 `json:"minReplicas"`
	// The upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that `minReplicas`.
	MaxReplicas int32 `json:"maxReplicas"`
	// Target average of CPU utilization over running replicas (e.g. 95 means 95%)
	Cpu *int32 `json:"cpu,omitempty"`
	// Target average of memory utilization over running replicas (e.g. 80 means 80%)
	Memory *int32 `json:"memory,omitempty"`
	// Target average of HTTP requests per seconds over running replicas (e.g. 100 means 100 req/s)
	Rps *int32 `json:"rps,omitempty"`
	// Schedules are recurring or not time-windows where the instance can scale in/out regardless of traffic or resource utilization.
	Schedules []ScheduledWindow `json:"schedules,omitempty"`
}

// NewAutoscale instantiates a new Autoscale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoscale(minReplicas int32, maxReplicas int32) *Autoscale {
	this := Autoscale{}
	this.MinReplicas = minReplicas
	this.MaxReplicas = maxReplicas
	return &this
}

// NewAutoscaleWithDefaults instantiates a new Autoscale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoscaleWithDefaults() *Autoscale {
	this := Autoscale{}
	return &this
}

// GetMinReplicas returns the MinReplicas field value
func (o *Autoscale) GetMinReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinReplicas
}

// GetMinReplicasOk returns a tuple with the MinReplicas field value
// and a boolean to check if the value has been set.
func (o *Autoscale) GetMinReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinReplicas, true
}

// SetMinReplicas sets field value
func (o *Autoscale) SetMinReplicas(v int32) {
	o.MinReplicas = v
}

// GetMaxReplicas returns the MaxReplicas field value
func (o *Autoscale) GetMaxReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxReplicas
}

// GetMaxReplicasOk returns a tuple with the MaxReplicas field value
// and a boolean to check if the value has been set.
func (o *Autoscale) GetMaxReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxReplicas, true
}

// SetMaxReplicas sets field value
func (o *Autoscale) SetMaxReplicas(v int32) {
	o.MaxReplicas = v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Autoscale) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscale) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Autoscale) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *Autoscale) SetCpu(v int32) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Autoscale) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscale) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Autoscale) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *Autoscale) SetMemory(v int32) {
	o.Memory = &v
}

// GetRps returns the Rps field value if set, zero value otherwise.
func (o *Autoscale) GetRps() int32 {
	if o == nil || IsNil(o.Rps) {
		var ret int32
		return ret
	}
	return *o.Rps
}

// GetRpsOk returns a tuple with the Rps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscale) GetRpsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rps) {
		return nil, false
	}
	return o.Rps, true
}

// HasRps returns a boolean if a field has been set.
func (o *Autoscale) HasRps() bool {
	if o != nil && !IsNil(o.Rps) {
		return true
	}

	return false
}

// SetRps gets a reference to the given int32 and assigns it to the Rps field.
func (o *Autoscale) SetRps(v int32) {
	o.Rps = &v
}

// GetSchedules returns the Schedules field value if set, zero value otherwise.
func (o *Autoscale) GetSchedules() []ScheduledWindow {
	if o == nil || IsNil(o.Schedules) {
		var ret []ScheduledWindow
		return ret
	}
	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscale) GetSchedulesOk() ([]ScheduledWindow, bool) {
	if o == nil || IsNil(o.Schedules) {
		return nil, false
	}
	return o.Schedules, true
}

// HasSchedules returns a boolean if a field has been set.
func (o *Autoscale) HasSchedules() bool {
	if o != nil && !IsNil(o.Schedules) {
		return true
	}

	return false
}

// SetSchedules gets a reference to the given []ScheduledWindow and assigns it to the Schedules field.
func (o *Autoscale) SetSchedules(v []ScheduledWindow) {
	o.Schedules = v
}

func (o Autoscale) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Autoscale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["minReplicas"] = o.MinReplicas
	toSerialize["maxReplicas"] = o.MaxReplicas
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Rps) {
		toSerialize["rps"] = o.Rps
	}
	if !IsNil(o.Schedules) {
		toSerialize["schedules"] = o.Schedules
	}
	return toSerialize, nil
}

type NullableAutoscale struct {
	value *Autoscale
	isSet bool
}

func (v NullableAutoscale) Get() *Autoscale {
	return v.value
}

func (v *NullableAutoscale) Set(val *Autoscale) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoscale) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoscale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoscale(val *Autoscale) *NullableAutoscale {
	return &NullableAutoscale{value: val, isSet: true}
}

func (v NullableAutoscale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoscale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
